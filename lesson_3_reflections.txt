Q1: When would you want to use a remote repository rather than keeping all your work local?
A1: A remote repository would work great for collaborating with others on a project, or if it may be 
possible that you will work from multiple devices in different locations.  It's also a good way to 
back up your work in case something happens to your PC and you lose your local files.

Q2: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A2: This gives you a chance to make sure you want to keep what you have, or to test new code before 
saving it in the remote repository.

Q3: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A3: A fork creates a clone of a remote repository on GitHub, to allow you to change files that you may not have 
permission to do on the original repository.  A clone is a copy of a repository (remote -> local, or local -> local) 
and is typically used to work on files locally on your computer. A branch is the original or a separate history of 
commits in a repository, allowing you to maintain version control on your work.

Q4: What is the benefit of having a copy of the last known state of the remote stored locally?
A4: This allows you to work offline like on an airplane or without an internet connection.

Q5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A5: I would probably use a cloud storage app like Dropbox or Google Drive.  It might be a little easier because 
there would be less to configure intitially, but managing version control while collaborating with others would 
be significantly harder, since it would rely on everybody being responsible for their own work and merging changes.

Q6: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A6: Using a separate branch is ideal for making changes that may break the original code or adding features that may or may 
not be incorporated into the final release.  This makes it harder to update the master branch though when collaborating. 
Simply working directly in the master branch makes commiting your changes much less complicated.

Git commands:
Git fetch -> allows you to 'pull' changes from the remote, updating local copy only (new branch), allowing use of get diff for conflicts before merging